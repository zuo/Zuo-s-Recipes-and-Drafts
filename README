,--------------------------------------------------------------------.
| Zuo's Recipes and Drafts: small pieces of (a probably useful) code |
`--------------------------------------------------------------------'

[code in Python, unless explicitly marked differently]

Copyright (c) 2010, 2011 Jan Kaliszewski (zuo). All rights reserved.
Licensed under the MIT License (see: LICENSE).

----------------------------------------------------------------------

Repo content:

* auxmethods.py [plus auxmethods_test.py]
  -- CLOS-like around/before/after auxiliary methods (implemented
     using native Python features: decorators, class inheritance plus
     super(), private name mangling).

* clonetools/*
  -- tools for cloning classes and functions, useful when you need to
     "copy" a class or a function to adjust it (e.g. adding __slots__
     to all base clases), without hurting the original class/function
     object(s);
  -- IT'S AN ALPHA VERSION!

  * clonetools/flatmirror.py
    -- a submodule that can be used as a standalone module;
    -- for making "flat mirrors" of classes, i.e. fake subclasses with
       reduced class hierarchy.

* flocktests.py
  -- tiny fcntl.flock() (Unix file lock) behaviour sampling script;
  -- an exemplary/educational piece of code rather than a utility script.

* mplogfilehandler.py [plus mplogfilehandler_quicktest.py]
  -- simple multiprocess-safe logging and interprocess locking classes;
  -- Unix implementation (flock-based) + generic abstract classes.

* namedtuple_with_abc.py
  -- if you need to define named tuple subclasses (including reusable
     abstract ones) adding/overriding some methods; to have the named
     tuple ABC (abstract base class) for isinstance()/issubclass()
     tests; or simply would like to define your named tuple classes in
     a class-syntax-based and DRY way (without repeating type names...)
     -- this recipe is for you.

* trace_logging.py
  -- just import, call and log your selected call/return/exception/etc.
     events (you can use the standard Python logging framework);
  -- quite a flexible tool and about 50 effective SLOC only (excluding
     the example script);
  -- rather for debugging than for production environments (programs
     noticeably slow down).

* ...to be continued :)
